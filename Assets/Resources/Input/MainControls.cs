//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Resources/Input/MainControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""c6b8ea3c-11ba-42c5-9c9a-50f26f69574d"",
            ""actions"": [
                {
                    ""name"": ""StartMovement"",
                    ""type"": ""Button"",
                    ""id"": ""f9a2d51f-37ba-43b5-9733-d4c323015767"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopMovement"",
                    ""type"": ""Button"",
                    ""id"": ""111122bd-5029-44f7-b645-740d0761c4f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pointer"",
                    ""type"": ""Value"",
                    ""id"": ""e5db68dc-bf61-41c7-9cf6-fb1e354c2c3b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f6ef518-c730-482c-adc2-faae14bb02d7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d70af781-5d33-4517-86a9-2275c526c006"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cef3f4e6-166d-450e-98f7-4310805bcefb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_StartMovement = m_Movement.FindAction("StartMovement", throwIfNotFound: true);
        m_Movement_StopMovement = m_Movement.FindAction("StopMovement", throwIfNotFound: true);
        m_Movement_Pointer = m_Movement.FindAction("Pointer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_StartMovement;
    private readonly InputAction m_Movement_StopMovement;
    private readonly InputAction m_Movement_Pointer;
    public struct MovementActions
    {
        private @MainControls m_Wrapper;
        public MovementActions(@MainControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartMovement => m_Wrapper.m_Movement_StartMovement;
        public InputAction @StopMovement => m_Wrapper.m_Movement_StopMovement;
        public InputAction @Pointer => m_Wrapper.m_Movement_Pointer;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @StartMovement.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnStartMovement;
                @StartMovement.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnStartMovement;
                @StartMovement.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnStartMovement;
                @StopMovement.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnStopMovement;
                @StopMovement.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnStopMovement;
                @StopMovement.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnStopMovement;
                @Pointer.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnPointer;
                @Pointer.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnPointer;
                @Pointer.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnPointer;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartMovement.started += instance.OnStartMovement;
                @StartMovement.performed += instance.OnStartMovement;
                @StartMovement.canceled += instance.OnStartMovement;
                @StopMovement.started += instance.OnStopMovement;
                @StopMovement.performed += instance.OnStopMovement;
                @StopMovement.canceled += instance.OnStopMovement;
                @Pointer.started += instance.OnPointer;
                @Pointer.performed += instance.OnPointer;
                @Pointer.canceled += instance.OnPointer;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    public interface IMovementActions
    {
        void OnStartMovement(InputAction.CallbackContext context);
        void OnStopMovement(InputAction.CallbackContext context);
        void OnPointer(InputAction.CallbackContext context);
    }
}
